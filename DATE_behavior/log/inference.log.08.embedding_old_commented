x.shape
torch.Size([1, 512, 768])
input_ids have 23 tokens
word embedding token fetch output: latency=0.0, energy=0
w_q.weight
Parameter containing:
tensor([[ 0.0293, -0.0092, -0.0056,  ..., -0.0146,  0.0277,  0.0038],
        [-0.0111, -0.0017,  0.0008,  ...,  0.0280, -0.0113,  0.0271],
        [-0.0075, -0.0247,  0.0235,  ...,  0.0008, -0.0145,  0.0322],
        ...,
        [ 0.0231, -0.0018, -0.0341,  ...,  0.0339,  0.0147,  0.0094],
        [ 0.0241,  0.0225, -0.0112,  ..., -0.0069, -0.0036,  0.0029],
        [ 0.0284, -0.0208,  0.0111,  ..., -0.0176,  0.0164, -0.0338]],
       requires_grad=True)
w_q.shape
torch.Size([768, 768])
lat,en: fet mac output compute q,k,v
0.0016896 0.10744233984
Operation1: Latency and energy from MUL of X and W_Q, W_K, W_V: 
0.0016896 ms and 0.10744233984 mJ
query.shape
torch.Size([1, 512, 768])
query.shape
torch.Size([1, 12, 512, 64])
lat,en: after cap_bl_to_sa_wr_rm: q,k,v write
0.003993600000000001 0.10745081856
Operation2: cap_write q,k,v: 
Latency = 0.002304 and Energy = 8.478719999983907e-06
lat,en: after qkt mac computation
0.010752 0.13539667967999997
Operation3: cap mac QK_T: 
Latency = 0.0067583999999999995 and Energy = 0.02794586111999999
attention_scores.shape
torch.Size([1, 12, 512, 512])
qk_t write output: lat,en
0.016896 0.13541928959999996
softmax output: lat,en
0.016896 0.13541928959999996


Operation4: Softmax and writing QK_T together:  
Latency = 0.006144 and Energy = 2.2609919999986888e-05
attention_scores.shape
torch.Size([1, 12, 512, 512])
qkt*v output: lat,en
0.016937523609600002 0.13543027835972613
Operation5: CAP-MAC Softmax output*V computation:  
Latency = 4.1523609600000784e-05 and Energy = 1.0988759726166724e-05


attention_matrix.shape
torch.Size([1, 12, 512, 64])
after writing soft(qkt)*v
0.0169695236096 0.13543310459972613


MHA output lat,en results
0.0169703886848 0.13549647667037992
Operation6: FET MAC: Multiplication with W_O:  
Latency = 8.6507519999941e-07 and Energy = 6.33720706537962e-05


attention_matrix.shape
torch.Size([1, 512, 768])
After writing MHA output to the FET: lat,en
0.0182503886848 0.13549853491037994
add_dram: lat,en
0.0182503886848 0.13549853491037994


layernorm output1 shape:
torch.Size([1, 512, 768])
after writing the output of the x+mha_output in the fet: lat,en
0.0195303886848 0.13550059315037996


ff1 layer output shape:
torch.Size([1, 512, 3072])
batch: 1, seq_len: 512, ff_hidden_dim: 3072, d_model: 768
ff1 mac output: lat,en
0.01953125376 0.1357540814329951
Operation7: FET MAC FF1:  
Latency = 8.6507519999941e-07 and Energy = 0.000253488282615155
ff1 mac output FET write: lat,en
0.02081125376 0.13576231439299513


ff_relu shape:
torch.Size([1, 512, 3072])
batch: 1, seq_len: 512, ff_hidden_dim: 3072, d_model: 768
FF2 mac operation output: lat,en
0.0208121188352 0.13601580267561028
Operation8: FET MAC FF2:  
Latency = 8.6507519999941e-07 and Energy = 0.000253488282615155
ff2 mac output FET write: lat,en
0.0220921188352 0.13601786091561027


ff_out.shape
torch.Size([1, 512, 768])
torch.Size([1, 512, 768])
Encoder layer output: add_dram x+ff2 : lat,en
0.0220921188352 0.13601786091561027
Encoder output write FET: lat,en
0.0233721188352 0.1360199191556103


lat_before_mha,lat_after_mha,lat_after_encoder
0.0 0.0169695236096 0.0233721188352
en_before_mha,en_after_mha,en_after_encoder
0.0 0.13543310459972613 0.1360199191556103


end_to_end_latency is 0.2804654260224 and end_to_end_energy is 1.6322390298673235
